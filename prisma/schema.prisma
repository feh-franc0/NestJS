generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")

  author      User         @relation(fields: [authorId], references: [id])
  bestAnswer  Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answer      Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String    @map("question_id")

  author       User         @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  question     Question     @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

// model Company {
//   id                String    @id @default(uuid())
//   cnpj              String
//   email             String    @unique
//   phoneNumber       String
//   name              String
//   address           String
//   acceptsInsurances String[]
//   subscriptionPlans String[]
//   patients          Patient[]

//   @@map("Companies")
// }

model Patient {
  id                    String                  @id @default(uuid())
  companyId             String
  // company               Company                @relation(fields: [companyId], references: [id])
  isActive              Boolean
  comorbidityTypes      String[]
  relativeName          String
  elderlyName           String
  address               String
  importantPhones       String[]
  email                 String                  @unique
  medicationDoseTiming  Medication[]
  allergiesRestrictions AlergiesRestrictions[]
  cpfDocuments          String
  pdfPhotoFiles         String[]
  patientCode           String
  gender                String
  lastAppointment       String
  insurance             String
  Appointments          Appointment[]
  FinishAppointmentForm FinishAppointmentForm[]

  @@map("Patients")
}

model AlergiesRestrictions {
  id        String                @id @default(uuid())
  name      String
  type      AlergyRestrictionType
  patient   Patient               @relation(fields: [patientId], references: [id])
  patientId String

  @@map("AlergiesRestrictions")
}

enum AlergyRestrictionType {
  ALLERGY
  RESTRICTION
}

model Exam {
  id               String @id @default(uuid())
  patientId        String @unique
  examName         String
  professionalName String
  date             String
  description      String
  doctorSignature  String
  pdfPhotoDocument String

  @@map("Exams")
}

model Medication {
  id             String         @id @default(uuid())
  name           String
  type           MedicationType
  dose           String
  timing         String
  prescription   Prescription   @relation(fields: [prescriptionId], references: [id])
  prescriptionId String
  patient        Patient?       @relation(fields: [patientId], references: [id])
  patientId      String?

  @@map("Medications")
}

model Prescription {
  id               String       @id @default(uuid())
  patientId        String
  medications      Medication[]
  doctorSignature  String
  pdfPhotoDocument String

  @@map("Prescriptions")
}

enum MedicationType {
  DROP
  PILL
}

model Employee {
  id           String  @id @default(uuid())
  isActive     Boolean
  name         String
  address      String
  phoneNumber  String
  email        String  @unique
  cpfDocuments String
  employeeCode String
  position     String
  birthDate    String
  gender       String

  currentServiceId String?

  Appointments          Appointment[]
  FinishAppointmentForm FinishAppointmentForm[]

  @@map("Employees")
}

model Appointment {
  id                      String                @id @default(uuid())
  companyId               String
  patient                 Patient               @relation(fields: [patientId], references: [id])
  employee                Employee              @relation(fields: [employeeId], references: [id])
  finishAppointmentForm   FinishAppointmentForm @relation(fields: [finishAppointmentFormId], references: [id])
  finishAppointmentFormId String

  residenceAddress   String
  initialConsultDate String
  finalConsultDate   String
  consultationFee    String
  patientId          String
  employeeId         String

  @@map("Appointments")
}

model FinishAppointmentForm {
  id               String        @id @default(uuid())
  companyId        String
  patient          Patient       @relation(fields: [patientId], references: [id])
  employee         Employee      @relation(fields: [employeeId], references: [id])
  patientId        String
  employeeId       String
  residenceAddress String
  consultationFee  String
  Appointment      Appointment[]

  @@map("finish_appointment_form")
}

model Report {
  id                                                     String         @id @default(uuid())
  dailyScheduledPatientsCount                            Int
  futureConsultationsCount                               Int
  patientsConfirmedDayBefore                             Int
  doneAppointmentsCount                                  Int
  cancelledAppointmentsCount                             Int
  patientsBeingAttendedCount                             Int
  remarketingMessagesSent                                Int
  lineGraphConsultationCount                             Consultation[] @relation(name: "ReportLineGraphConsultation")
  pieChartCancelledAttendedRescheduledConsultationsCount Consultation[] @relation(name: "ReportPieChartConsultation")

  @@map("Reports")
}

model Consultation {
  id                       String @id @default(uuid())
  month                    String
  consultationCount        Int
  cancelledConsultations   Int
  attendedConsultations    Int
  rescheduledConsultations Int
  consultationsToBeDone    Int
  lineReport               Report @relation(name: "ReportLineGraphConsultation", fields: [lineReportId], references: [id])
  pieReport                Report @relation(name: "ReportPieChartConsultation", fields: [pieReportId], references: [id])
  lineReportId             String
  pieReportId              String

  @@map("Consultations")
}

model Financial {
  id                   String   @id @default(uuid())
  financialTransaction String
  transactionType      String
  document             String
  billing              String
  accountsPayable      String
  accountsReceivable   String
  total                String
  payerName            String
  payeeName            String
  value                String
  issuanceDueDate      String
  supportingDocuments  String[]
  printStatement       String

  @@map("Financials")
}

model APPOINTMENTZAP {
  id String @id @default(uuid())

  title              String
  initialDescription String

  @@map("APPOINTMENTZAPs")
}

model CAMPAIGNZAP {
  id String @id @default(uuid())

  title        String
  subtitle     String
  campaignText String
  recipients   String[]

  @@map("CAMPAIGNZAPs")
}

model MagazineNewsletter {
  id                       String                     @id @default(uuid())
  title                    String
  description              String
  content                  String
  patientAssistanceChatbot PatientAssistanceChatbot[] @relation("NewsletterChatbot")

  @@map("MagazineNewsletters")
}

model PatientAssistanceChatbot {
  id                     String                 @id @default(uuid())
  magazineNewsletter     MagazineNewsletter[]   @relation("NewsletterChatbot")
  customerSatisfaction   CustomerSatisfaction[] @relation("FeedbackChatbot")
  magazineNewsletterId   String?
  customerSatisfactionId String?

  @@map("PatientAssistanceChatbots")
}

model CustomerSatisfaction {
  id                         String                    @id @default(uuid())
  patientName                String
  employeeName               String
  employeeEvaluation         String
  companyEvaluation          String
  satisfactionLevel          Int
  satisfactionMessage        String
  patientAssistanceChatbot   PatientAssistanceChatbot? @relation(name: "FeedbackChatbot", fields: [patientAssistanceChatbotId], references: [id])
  patientAssistanceChatbotId String?

  @@map("CustomerSatisfactions")
}

model Notice {
  id            String @id @default(uuid())
  title         String
  noticeType    String
  startDate     String
  noticeEndDate String
  noticeMessage String

  @@map("Notices")
}
